<?php

namespace SkeletonGutenbergBlocks;

/**
 * The file that defines the core plugin class
 *
 * A class definition that includes attributes and functions used across both the
 * public-facing side of the site and the admin area.
 *
 * @link       https://booskills.com/rao
 * @since      1.0.0
 *
 * @package    SkeletonGutenbergBlocks
 * @subpackage SkeletonGutenbergBlocks/includes
 */

/**
 * The core plugin class.
 *
 * This is used to define internationalization, admin-specific hooks, and
 * public-facing site hooks.
 *
 * Also maintains the unique identifier of this plugin as well as the current
 * version of the plugin.
 *
 * @since      1.0.0
 * @package    SkeletonGutenbergBlocks
 * @subpackage SkeletonGutenbergBlocks/includes
 * @author     Rao <rao@booskills.com>
 */
class Init {

	/**
	 * The instance of this class
	 *
	 * @since    1.0.0
	 * @access   protected
	 * @var      object $instance The instance of the current class
	 */
	protected static $instance;

	/**
	 * The loader that's responsible for maintaining and registering all hooks that power
	 * the plugin.
	 *
	 * @since    1.0.0
	 * @access   protected
	 * @var      Loader $loader Maintains and registers all hooks for the plugin.
	 */
	protected $loader;

	/**
	 * The unique identifier of this plugin.
	 *
	 * @since    1.0.0
	 * @access   protected
	 * @var      string $plugin_name The string used to uniquely identify this plugin.
	 */
	protected $plugin_name;

	/**
	 * The current version of the plugin.
	 *
	 * @since    1.0.0
	 * @access   protected
	 * @var      string $version The current version of the plugin.
	 */
	protected $version;

	/**
	 * The admin class of the plugin.
	 *
	 * @since    1.0.0
	 * @access   protected
	 * @var      Admin $admin The current version of the plugin.
	 */
	protected $admin;

	/**
	 * The admin class of the plugin.
	 *
	 * @since    1.0.0
	 * @access   protected
	 * @var      Front $front The current version of the plugin.
	 */
	protected $front;



	/**
	 * Define the core functionality of the plugin.
	 *
	 * Set the plugin name and the plugin version that can be used throughout the plugin.
	 * Load the dependencies, define the locale, and set the hooks for the admin area and
	 * the public-facing side of the site.
	 *
	 * @since    1.0.0
	 */
	public function __construct() {


		if ( defined( 'SKELETON_GUTENBERG_BLOCKS_VERSION' ) ) {
			$this->version = SKELETON_GUTENBERG_BLOCKS_VERSION;
		} else {
			$this->version = '1.0.0';
		}
		if ( defined( 'SKELETON_GUTENBERG_BLOCKS_PLUGIN_NAME' ) ) {
			$this->plugin_name = SKELETON_GUTENBERG_BLOCKS_PLUGIN_NAME;
		} else {
			$this->plugin_name = 'skeleton_gutenberg_blocks';
		}


		$this->load_dependencies();
		$this->set_locale();
		$this->define_admin_hooks();
		$this->define_public_hooks();
		$this->define_blocks_hooks();
		$this->define_taxonomy_hooks();

		do_action( 'skeleton_gutenberg_blocks_init_construct' );

	}

	/**
	 * Load the required dependencies for this plugin.
	 *
	 * Include the following files that make up the plugin:
	 *
	 * - Loader. Orchestrates the hooks of the plugin.
	 * - i18n. Defines internationalization functionality.
	 * - Admin. Defines all hooks for the admin area.
	 * - Public. Defines all hooks for the public side of the site.
	 *
	 * Create an instance of the loader which will be used to register the hooks
	 * with WordPress.
	 *
	 * @since    1.0.0
	 * @access   private
	 */
	private function load_dependencies() {

		/* No Need to Load anything as autoloader is generated by Composer*/

		$this->loader = new Loader();

	}

	/**
	 * Define the locale for this plugin for internationalization.
	 *
	 * Uses the i18n class in order to set the domain and to register the hook
	 * with WordPress.
	 *
	 * @since    1.0.0
	 * @access   private
	 */
	private function set_locale() {

		$plugin_i18n = new i18N();

		/** @noinspection SpellCheckingInspection */
		$this->loader->add_action( 'plugins_loaded', $plugin_i18n, 'load_plugin_textdomain' );

	}

	/**
	 * Register all of the hooks related to the admin area functionality
	 * of the plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 */
	private function define_admin_hooks() {

		if ( ! is_admin() ) {
			return null;
		}

		$this->admin = $plugin_admin = new Admin( $this->get_plugin_name(), $this->get_version() );

		$this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_styles' );
		$this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_scripts' );


	}

	/**
	 * The name of the plugin used to uniquely identify it within the context of
	 * WordPress and to define internationalization functionality.
	 *
	 * @return    string    The name of the plugin.
	 * @since     1.0.0
	 */
	public function get_plugin_name() {
		return $this->plugin_name;
	}

	/**
	 * Retrieve the version number of the plugin.
	 *
	 * @return    string    The version number of the plugin.
	 * @since     1.0.0
	 */
	public function get_version() {
		return $this->version;
	}

	/**
	 * Register all of the hooks related to the public-facing functionality
	 * of the plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 */
	private function define_public_hooks() {

		if ( is_admin() ) {
			return null;
		}

		$this->front = $plugin_public = new Front( $this->get_plugin_name(), $this->get_version() );

		$this->loader->add_action( 'wp_enqueue_scripts', $plugin_public, 'enqueue_styles' );
		$this->loader->add_action( 'wp_enqueue_scripts', $plugin_public, 'enqueue_scripts' );

	}

	/**
	 * Register all the hooks related to Gutenberg
	 *
	 * @since    1.0.0
	 * @access   private
	 */
	private function define_blocks_hooks() {

		if ( ! function_exists( 'register_block_type' ) ) {
			// Gutenberg is not active.
			return;
		}

		$this->blocks = new Blocks( $this->get_plugin_name(), $this->get_version() );

		/**
		 * Register Blocks
		 */
		$this->loader->add_action( 'init', $this->blocks, 'register_blocks' );

		/**
		 * Only for Editor (admin)
		 */
		$this->loader->add_action( 'enqueue_block_editor_assets', $this->blocks, 'enqueue_block_editor_assets' );

		/**
		 * For Editor (admin) and Public (frontend)
		 */
		$this->loader->add_action( 'enqueue_block_assets', $this->blocks, 'enqueue_block_assets' );

	}

	/**
	 * Register all the hooks related to taxonomies
	 *
	 * @since    1.0.0
	 * @access   private
	 */
	private function define_taxonomy_hooks() {

//		$plugin_taxonomies = new Taxonomy();


	}

	/**
	 * Run the loader to execute all the hooks with WordPress.
	 *
	 * @since    1.0.0
	 */
	public function run() {
		$this->loader->run();
	}

	/**
	 * get the instance of the main plugin class
	 */
	public static function get_instance() {

		if ( ! self::$instance ) {
			self::$instance = new self();
			self::$instance->run();
		}

		return self::$instance;

	}


}
